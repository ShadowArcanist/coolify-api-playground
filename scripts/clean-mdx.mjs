import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Adjust this to your project root and folder with mdx files
const baseDir = path.resolve(__dirname, '..', 'content');

function getMdxFiles(dir) {
  let results = [];
  if (!fs.existsSync(dir)) {
    console.error(`Directory not found: ${dir}`);
    process.exit(1);
  }
  const list = fs.readdirSync(dir);
  for (const file of list) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      results = results.concat(getMdxFiles(filePath));
    } else if (filePath.endsWith('.mdx')) {
      results.push(filePath);
    }
  }
  return results;
}

function cleanMdxFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');

  const cleanedLines = [];
  let buffer = [];
  let skipping = false;
  let removedSomething = false;

  // Matches lines with either empty line or single char from import block chars
  const isPotentialImportChar = (line) => /^[a-zA-Z{}"\/\-_; ]?$/.test(line.trim());

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Remove the Fumadocs comment line exactly
    if (
      line.includes(
        '{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}'
      )
    ) {
      removedSomething = true;
      continue;
    }

    if (!skipping && (line.trim() === '' || isPotentialImportChar(line))) {
      buffer.push(line);
      skipping = true;
      continue;
    }

    if (skipping) {
      if (line.trim() === '' || isPotentialImportChar(line)) {
        buffer.push(line);
        continue;
      } else {
        // Block ended, check buffer
        const joined = buffer.join('').replace(/\s+/g, '');
        if (joined === 'import{APIPage}from"fumadocs-openapi/ui";') {
          removedSomething = true;
          buffer = [];
          skipping = false;
          i--; // reprocess this line on next loop iteration
          continue;
        } else {
          // Not the import block, flush buffer lines
          cleanedLines.push(...buffer);
          buffer = [];
          skipping = false;
          i--;
          continue;
        }
      }
    }

    cleanedLines.push(line);
  }

  // Edge case: leftover buffer at EOF
  if (skipping && buffer.length > 0) {
    const joined = buffer.join('').replace(/\s+/g, '');
    if (joined !== 'import{APIPage}from"fumadocs-openapi/ui";') {
      cleanedLines.push(...buffer);
    } else {
      removedSomething = true;
    }
  }

  if (removedSomething) {
    fs.writeFileSync(filePath, cleanedLines.join('\n'), 'utf-8');
    console.log(`Cleaned: ${filePath}`);
  } else {
    console.log(`No changes: ${filePath}`);
  }
}

const mdxFiles = getMdxFiles(baseDir);

if (mdxFiles.length === 0) {
  console.error(`No .mdx files found in ${baseDir}`);
  process.exit(1);
}

for (const file of mdxFiles) {
  cleanMdxFile(file);
}
